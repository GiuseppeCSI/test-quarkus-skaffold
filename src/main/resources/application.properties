# Configuration file
# key = value

## modalit√† di packaging legacy
quarkus.package.uber-jar=true
quarkus.package.type=legacy-jar

# imposta il root-context dell'applicazione
quarkus.http.root-path=/myprodsrvqrk
quarkus.http.port=8080


##### esempio di securizzazione su file 
##quarkus.http.auth.basic=true

##quarkus.security.users.file.enabled=true
##quarkus.security.users.file.users=test-users.properties
##quarkus.security.users.file.roles=test-roles.properties
##quarkus.security.users.file.realm-name=MyRealm
##quarkus.security.users.file.plain-text=true


##### esempio di securizzazione embedded
quarkus.http.auth.basic=true

quarkus.security.users.embedded.enabled=true
quarkus.security.users.embedded.plain-text=true
quarkus.security.users.embedded.users.user1=mypass
quarkus.security.users.embedded.users.user2=mypass
quarkus.security.users.embedded.roles.user1=writer,reader
quarkus.security.users.embedded.roles.user2=reader

##### securizzazione delle risorse

quarkus.http.auth.policy.user-policy.roles-allowed=writer,reader
quarkus.http.auth.permission.roles.paths=/*
quarkus.http.auth.permission.roles.policy=user-policy

#quarkus.http.auth.permission.public.paths=/api/noauth/*
#quarkus.http.auth.permission.public.policy=permit


#quarkus.vertx.max-worker-execute-time=1S

#esempio di tuning del server:
# massimo 100 richieste contemporaneamente servite + 
# coda di altre 100 richieste.
quarkus.thread-pool.max-threads=100
quarkus.thread-pool.queue-size=100

### logging
quarkus.log.level=INFO
quarkus.log.category.myprodsrvqrk.level=DEBUG

quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss.SSS} [myprodsrvqrk] %p <%c> <%t> %m%n

quarkus.log.handler.file.MYPRODSRVQRK.enable=true
quarkus.log.handler.file.MYPRODSRVQRK.path=myprodsrvqrk_log.txt
quarkus.log.handler.file.MYPRODSRVQRK.format=%d{yyyy-MM-dd HH:mm:ss.SSS} [myprodsrvqrk] %p <%c> <%t> %m%n
##quarkus.log.handler.file.key.rotation.max-file-size=6M
##quarkus.log.handler.file.key.rotation.max-backup-index=5
quarkus.log.category.myprodsrvqrk.handlers=MYPRODSRVQRK


#### persistenza con JPA/Hibernate

# datasource configuration
quarkus.datasource.db-kind=h2
quarkus.datasource.username=username-default
quarkus.datasource.jdbc.url=jdbc:h2:mem:testqrk
quarkus.datasource.jdbc.max-size=13
#quarkus.datasource.db-kind = postgresql
#quarkus.datasource.username = archtest
#quarkus.datasource.password = mypass
#quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/postgres
#quarkus.datasource.jdbc.url = jdbc:postgresql://127.0.0.1:2222/POSTGRES

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.sql-load-script=import.sql

# permette di utilizzare uno schema specifico (diverso dal default es. 'public' per postgresql)
#quarkus.hibernate-orm.database.default-schema=default

## cxf client per iride2 pep
quarkus.cxf.endpoint.pep.client-endpoint-url=http://tst-applogic-nmsf2e.csi.it/pep_wsfad_nmsf_policy/services/PolicyEnforcerBase
quarkus.cxf.endpoint.pep.service-interface=it.csi.myprod.myprodsrvqrk.api.wsclient.iride2pep.PolicyEnforcerBase
quarkus.cxf.endpoint.pep.username=dymmyuser
quarkus.cxf.endpoint.pep.password=mypass

## workaround per problema quarkiverse/cxf
quarkus.cxf.path=/cxf
quarkus.cxf.endpoint."/dummy".implementor=it.csi.myprod.myprodsrvqrk.api.wsclient.PEPDummyImpl


### configurazioni applicative
greeting.message=Hello, and welcome to quarkusland!



